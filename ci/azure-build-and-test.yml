parameters:
- name: canaryBuild
  type: boolean
  default: false
- name: primaryBuild
  type: boolean
  default: false

steps:
- checkout: self

- bash: |
    set -e
    rustup set profile minimal
    rustup component remove --toolchain=$TOOLCHAIN rust-docs || echo "already removed"
    rustup update --no-self-update $TOOLCHAIN
    rustup default $TOOLCHAIN
    # Log versions
    set -ex
    rustup -V
    rustc -Vv
    cargo -V
  displayName: Set up Rust

# Bootstrap a binary for the buildhost arch with the unmodified checkout at
# 0.0.0 versions. We're going to have to build everything in release mode
# eventually, so it saves a bit of time to do that from the start.

- bash: cargo build --all --release
  displayName: "cargo build (bootstrap)"

- bash: |
    git status  # temp: Windows builds intermittently report changed files here??
    cargo run --release -- release-workflow apply-versions
  displayName: "cranko release-workflow apply-versions (using bootstrapped build)"

# Now that we've applied versions, mainline test workflow

- bash: cargo build --all --release
  displayName: "cargo build (release)"

- bash: cargo test --all --release
  displayName: "cargo test (release)"

# For non-canary builds, generate and export artifacts.

- ${{ if eq(parameters.canaryBuild, false) }}:
  - bash: |
      git add .
      cargo run --release -- release-workflow commit
      git show HEAD
    displayName: "Make release commit"

  - bash: |
      artifact_dir="$(Build.ArtifactStagingDirectory)/binary-$TARGET"
      mkdir -p "$artifact_dir"
      cargo run --release -- cargo package-released-binaries -t $TARGET $artifact_dir -- build --release
    displayName: "Package binaries"

  - task: PublishPipelineArtifact@1
    displayName: Publish packaged binary artifact
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)/binary-$(TARGET)'
      artifactName: binary-$(TARGET)

  # If, further, we're the primary build on the `rc` branch, export our release
  # commit as the canonical one.

  - ${{ if and(eq(parameters.primaryBuild, true), eq(variables['Build.SourceBranchName'], 'rc')) }}:
    - bash: |
        artifact_dir="$(Build.ArtifactStagingDirectory)/git-release"
        mkdir -p "$artifact_dir"
        git bundle create "$artifact_dir/release.bundle" origin/master..HEAD
      displayName: "Bundle release commit"

    - task: PublishPipelineArtifact@1
      displayName: Publish git bundle artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/git-release'
        artifactName: git-release
