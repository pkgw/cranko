# Main pipeline spec for CI/CD on Azure Pipelines, strongly
# derived from Cargo's.

trigger:
  branches:
    include:
    - master
    - rc

variables:
  MDBOOK_VERSION: 0.4.2

stages:
- stage: BuildAndTest
  jobs:

  # Main Linux build(s) that create release artifacts
  - job: Linux
    pool:
      vmImage: ubuntu-16.04
    steps:
      - template: azure-test-all.yml
        parameters:
          primaryRcBuild: ${{ eq(variables['Build.SourceBranchName'], 'rc') }}
    variables:
      TOOLCHAIN: stable
      OTHER_TARGET: i686-unknown-linux-gnu

  # As far as I can tell, there is no way to matrix over a template *parameter*?
  # So we need a separate group for the "canary" jobs that test build success but
  # shouldn't create release artifacts.
  - job: Linux_canary
    pool:
      vmImage: ubuntu-16.04
    steps:
      - template: azure-test-all.yml
        parameters:
          canaryBuild: true
    strategy:
      matrix:
        beta:
          TOOLCHAIN: beta
        nightly:
          TOOLCHAIN: nightly
    variables:
      OTHER_TARGET: i686-unknown-linux-gnu

  # Mac builds
  - job: macOS
    pool:
      vmImage: macos-10.15
    steps:
      - template: azure-test-all.yml
    variables:
      TOOLCHAIN: stable
      OTHER_TARGET: x86_64-apple-ios

  # Windows builds
  - job: Windows
    pool:
      vmImage: windows-2019
    steps:
      - template: azure-test-all.yml
    strategy:
      matrix:
        x86_64-msvc:
          TOOLCHAIN: stable-x86_64-pc-windows-msvc
          OTHER_TARGET: i686-pc-windows-msvc
        x86_64-gnu:
          TOOLCHAIN: stable-x86_64-pc-windows-gnu
          OTHER_TARGET: i686-pc-windows-gnu

  # rustfmt check
  - job: rustfmt
    pool:
      vmImage: ubuntu-16.04
    steps:
      - template: azure-install-rust.yml
      - bash: rustup component add rustfmt
        displayName: "Install rustfmt"
      - bash: cargo fmt --all -- --check
        displayName: "Check rustfmt (cargo)"
    variables:
      TOOLCHAIN: stable

  # website/book build
  - job: website
    pool:
      vmImage: ubuntu-16.04
    steps:
    - template: azure-install-rust.yml
    - bash: |
        fn="mdbook-v$(MDBOOK_VERSION)-x86_64-unknown-linux-gnu.tar.gz"
        url="https://github.com/rust-lang/mdBook/releases/download/v$(MDBOOK_VERSION)/$fn"
        wget -q --progress=dot "$url"
        tar xzf "$fn"
        rm -f "$fn"
        # See build.sh below:
        mkdir -p target/debug
        mv mdbook target/debug/
      displayName: Install mdbook $(MDBOOK_VERSION)
    - bash: cargo build --bin cranko
      displayName: "cargo build (bootstrap)"
    - bash: cargo run -- release-workflow apply-versions
      displayName: "cranko release-workflow apply-versions (using bootstrapped build)"
    - bash: cargo build --bin cranko
      displayName: "cargo build (versioned)"
    - bash: PATH="$(pwd)/target/debug:$PATH" www/build.sh
      displayName: "Build website content"
    - bash: |
        cargo run -- git-util reboot-branch gh-pages www/content
        artifact_dir="$(Build.ArtifactStagingDirectory)/git-gh-pages"
        mkdir -p "$artifact_dir"
        git bundle create "$artifact_dir/gh-pages.bundle" gh-pages
      displayName: "Prep new gh-pages branch"
    - task: PublishPipelineArtifact@1
      displayName: Publish git bundle artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/git-gh-pages'
        artifactName: git-gh-pages

# If all of those succeed and we're not in a pull request, run the deployment
# pipeline. If we're specifically on the `rc` branch, this will finalize any
# releases.
- stage: Deploy
  condition: and(succeeded('BuildAndTest'), not(eq(variables['build.reason'], 'PullRequest')))
  jobs:
  - deployment: Deploy
    environment: Deploy
    displayName: Deploy
    pool:
      vmImage: ubuntu-16.04

    variables:
    - group: Deployment Credentials

    strategy:
      runOnce:
        deploy:
          steps:
            - template: azure-deployment.yml
              parameters:
                rcBuild: ${{ eq(variables['Build.SourceBranchName'], 'rc') }}
