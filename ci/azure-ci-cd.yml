# Main pipeline spec for CI/CD on Azure Pipelines, strongly
# derived from Cargo's.

trigger:
  branches:
    include:
    - master
    - rc

# We cannot use Pipeline's matrixing framework because only it works with
# *runtime variables*, while we want to use templates with *parameters* which
# are evaluated at *compile time* only. By coding our matrixing data as
# top-level parameters, we can use them in compile-time template evaluation
# (`${{ }}` expressions) to achieve a matrixing effect. Only a few variables can
# be used at compile time: see "Available in templates?" in the table at:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml
parameters:
  - name: builds
    type: object
    default:
    - name: linux_stable
      vmImage: ubuntu-20.04
      params:
        primaryBuild: true
      vars:
        TARGET: x86_64-unknown-linux-gnu
        TOOLCHAIN: stable

    - name: linux_beta
      vmImage: ubuntu-20.04
      params:
        canaryBuild: true
      vars:
        TARGET: x86_64-unknown-linux-gnu
        TOOLCHAIN: beta

    - name: linux_nightly
      vmImage: ubuntu-20.04
      params:
        canaryBuild: true
      vars:
        TARGET: x86_64-unknown-linux-gnu
        TOOLCHAIN: nightly

    - name: windows_msvc
      vmImage: windows-2019
      params: {}
      vars:
        TARGET: x86_64-pc-windows-msvc
        TOOLCHAIN: stable-x86_64-pc-windows-msvc

    - name: windows_gnu
      vmImage: windows-2019
      params: {}
      vars:
        TARGET: x86_64-pc-windows-gnu
        TOOLCHAIN: stable-x86_64-pc-windows-gnu

    - name: macos
      vmImage: macos-10.15
      params: {}
      vars:
        TARGET: x86_64-apple-darwin
        TOOLCHAIN: stable

  - name: crossBuilds
    type: object
    default:
    - name: aarch64_unknown_linux_gnu
      vars:
        TARGET: aarch64-unknown-linux-gnu

    - name: powerpc64le_unknown_linux_gnu
      vars:
        TARGET: powerpc64le-unknown-linux-gnu

variables:
  CROSS_VERSION: 0.2.1
  MDBOOK_VERSION: 0.4.2

stages:
- stage: BuildAndTest
  jobs:

  # Main builds
  - ${{ each build in parameters.builds }}:
    - job: ${{ format('build_{0}', build.name) }}
      pool:
        vmImage: ${{ build.vmImage }}
      steps:
      - template: azure-build-and-test.yml
        parameters:
          ${{ insert }}: ${{ build.params }}
      variables:
        ${{ insert }}: ${{ build.vars }}

  # Cross builds
  - ${{ each build in parameters.crossBuilds }}:
    - job: ${{ format('cross_{0}', build.name) }}
      pool:
        vmImage: ubuntu-20.04
      steps:
      - template: azure-cross-build.yml
      variables:
        ${{ insert }}: ${{ build.vars }}

  # rustfmt check
  - job: rustfmt
    pool:
      vmImage: ubuntu-16.04
    steps:
    - bash: rustup component add rustfmt
      displayName: "Install rustfmt"
    - bash: cargo fmt --all -- --check
      displayName: "Check rustfmt (cargo)"
    variables:
      TOOLCHAIN: stable

  # website/book build
  - job: website
    pool:
      vmImage: ubuntu-16.04
    steps:
    - bash: |
        fn="mdbook-v$(MDBOOK_VERSION)-x86_64-unknown-linux-gnu.tar.gz"
        url="https://github.com/rust-lang/mdBook/releases/download/v$(MDBOOK_VERSION)/$fn"
        wget -q --progress=dot "$url"
        tar xzf "$fn"
        rm -f "$fn"
        # See build.sh below:
        mkdir -p target/debug
        mv mdbook target/debug/
      displayName: Install mdbook $(MDBOOK_VERSION)
    - bash: cargo build --bin cranko
      displayName: "cargo build (bootstrap)"
    - bash: cargo run -- release-workflow apply-versions
      displayName: "cranko release-workflow apply-versions (using bootstrapped build)"
    - bash: cargo build --bin cranko
      displayName: "cargo build (versioned)"
    - bash: PATH="$(pwd)/target/debug:$PATH" www/build.sh
      displayName: "Build website content"
    - bash: |
        cargo run -- git-util reboot-branch gh-pages www/content
        artifact_dir="$(Build.ArtifactStagingDirectory)/git-gh-pages"
        mkdir -p "$artifact_dir"
        git bundle create "$artifact_dir/gh-pages.bundle" gh-pages
      displayName: "Prep new gh-pages branch"
    - task: PublishPipelineArtifact@1
      displayName: Publish git bundle artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/git-gh-pages'
        artifactName: git-gh-pages

# If all of those succeed and we're not in a pull request, run the deployment
# pipeline. If we're specifically on the `rc` branch, this will finalize any
# releases.
- stage: Deploy
  condition: and(succeeded('BuildAndTest'), not(eq(variables['build.reason'], 'PullRequest')))
  jobs:
  - deployment: Deploy
    environment: Deploy
    displayName: Deploy
    pool:
      vmImage: ubuntu-16.04

    variables:
    - group: Deployment Credentials

    strategy:
      runOnce:
        deploy:
          steps:
          - template: azure-deployment.yml
