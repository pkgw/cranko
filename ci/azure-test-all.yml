parameters:
- name: canaryBuild
  type: boolean
  default: false

steps:
- checkout: self
  fetchDepth: 1

- template: azure-install-rust.yml

- bash: rustup target add $OTHER_TARGET
  displayName: "Install cross-compile target"

- bash: sudo apt update -y && sudo apt install gcc-multilib -y
  displayName: "Install gcc-multilib (linux)"
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))

# Bootstrap a binary for the buildhost arch with the unmodified checkout at
# 0.0.0 versions.

- bash: cargo build --all
  displayName: "cargo build (bootstrap)"

- bash: cargo run -- apply
  displayName: "cranko apply (using bootstrapped build)"

- bash: git show HEAD
  displayName: "git show HEAD"  # show what cranko apply did

# Now that we've applied versions, mainline test workflow

- bash: cargo build --all --release
  displayName: "cargo build (release)"

- bash: cargo test --all --release
  displayName: "cargo test (release)"

# For non-canary builds, export artifacts.

- ${{ if eq(parameters.canaryBuild, false) }}:
  - bash: |
      version="$(cargo run -- show version cranko)"
      target="$(find . -name cranko-target.txt -execdir cat '{}' ';' -quit)"
      echo "##vso[task.setvariable variable=rustTarget;]$target"
      artifact_dir="$(Build.ArtifactStagingDirectory)/binary-$target"
      mkdir -p "$artifact_dir"
      tar="$artifact_dir/cranko-$version-$target.tar.gz"
      tar cf "$tar" cranko -C target/release
    displayName: "Package binary (non-Windows)"
    condition: and(succeeded(), ne(variables['Agent.OS'], 'Windows_NT'))

  - bash: |
      version="$(cargo run -- show version cranko)"
      target="$(find . -name cranko-target.txt -execdir cat '{}' ';' -quit)"
      echo "##vso[task.setvariable variable=rustTarget;]$target"
      # at the moment, need to convert Windows paths to Cygwin:
      staging=$(echo "$(Build.ArtifactStagingDirectory)" | sed -e 's|\\|\/|g' -e 's|^\([A-Za-z]\)\:/\(.*\)|/\L\1\E/\2|')
      artifact_dir="$staging/binary-$target"
      mkdir -p "$artifact_dir"
      zip="$artifact_dir/cranko-$version-$target.zip"
      cd target/release
      zip -u "$zip" cranko
    displayName: "Package binary (Windows)"
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

  - task: PublishPipelineArtifact@1
    displayName: Publish packaged binary artifact
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)/binary-$(rustTarget)'
      artifactName: binary-$(rustTarget)
