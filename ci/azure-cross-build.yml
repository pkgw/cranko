steps:
- checkout: self

- bash: |
    set -ex
    rustup target add $TARGET
  displayName: Add target $(TARGET)

- bash: |
    set -ex
    rustup -V
    rustc -Vv
    cargo -V
  displayName: Log versions

- bash: |
    fn="cross-v$(CROSS_VERSION)-x86_64-unknown-linux-gnu.tar.gz"
    url="https://github.com/rust-embedded/cross/releases/download/v$(CROSS_VERSION)/$fn"
    wget -q --progress=dot "$url"
    tar xzf "$fn"
    rm -f "$fn"
  displayName: Install cross $(CROSS_VERSION)

- bash: |
    echo "##vso[task.setvariable variable=CROSS_ARGS;]--target=$TARGET --release --features=vendored-openssl"
  displayName: Set build variables

# Bootstrap a binary for the buildhost arch with the unmodified checkout at
# 0.0.0 versions.

- bash: cargo build --all
  displayName: "cargo build (bootstrap)"

- bash: |
    cargo run -- release-workflow apply-versions
  displayName: "cranko release-workflow apply-versions (using bootstrapped build)"

# Rebuild with versions and create the release commit

- bash: cargo build --all
  displayName: "cargo build (versioned)"

- bash: |
    git add .
    cargo run -- release-workflow commit
    git show HEAD
  displayName: "Make release commit"

# Main build/test

- bash: ./cross build $CROSS_ARGS --all
  displayName: "cross build"

- bash: ./cross test $CROSS_ARGS --all
  displayName: "cross test"

# Publish binaries

- bash: |
    artifact_dir="$(Build.ArtifactStagingDirectory)/binary-$TARGET"
    mkdir -p "$artifact_dir"
    cargo run -- cargo package-released-binaries --command-name=./cross --reroot=. \
      -t $TARGET \
      $artifact_dir \
      -- build $CROSS_ARGS --all
  displayName: "Package binaries"

- task: PublishPipelineArtifact@1
  displayName: Publish packaged binary artifact
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)/binary-$(TARGET)'
    artifactName: binary-$(TARGET)
