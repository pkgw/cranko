# Cranko deployment workflows, run when all CI tests pass on the `master` or `rc
# branches. NB: right now we do nothing on `master`! (But we need a dummy job to
# keep Pipelines happy.) That could change.

jobs:

- ${{ if ne(variables['Build.SourceBranchName'], 'rc') }}:
  - job: dummy_setup_only
    pool:
      vmImage: ubuntu-20.04
    steps:
    - template: azure-deployment-setup.yml
      parameters:
        setupGit: false

- ${{ if eq(variables['Build.SourceBranchName'], 'rc') }}:
  - job: branch_and_tag
    pool:
      vmImage: ubuntu-20.04
    variables:
    - group: Deployment Credentials
    steps:
    - template: azure-deployment-setup.yml
      parameters:
        setupGit: true
    - bash: |
        set -xeou pipefail
        ./cranko release-workflow tag
        git push --tags origin release:release
      displayName: Tag and push
      env:
        GITHUB_TOKEN: $(GITHUB_TOKEN)

  - job: cargo_publish
    pool:
      vmImage: ubuntu-20.04
    variables:
    - group: Deployment Credentials
    steps:
    - template: azure-deployment-setup.yml
    - bash: |
        set -xeou pipefail
        # If `./cranko` isn't moved, Cargo will complain about the dirty
        # working directory.
        mv ./cranko /tmp/
        /tmp/cranko cargo foreach-released -- publish --no-verify
      displayName: Publish updated Cargo crates
      env:
        CARGO_REGISTRY_TOKEN: $(CARGO_REGISTRY_TOKEN)

  - job: github_releases
    dependsOn: branch_and_tag # otherwise, GitHub creates the tag itself
    pool:
      vmImage: ubuntu-20.04
    variables:
    - group: Deployment Credentials
    steps:
    - template: azure-deployment-setup.yml
      parameters:
        setupGit: true
    - bash: |
        set -xeou pipefail
        ./cranko github create-releases
        ./cranko github upload-artifacts cranko $(Pipeline.Workspace)/binary-*/*
      displayName: Create GitHub releases
      env:
        GITHUB_TOKEN: $(GITHUB_TOKEN)

  - job: update_website
    pool:
      vmImage: ubuntu-20.04
    variables:
      - group: Deployment Credentials
    steps:
    - template: azure-deployment-setup.yml
      parameters:
        setupGit: true
    - bash: |
        set -xeou pipefail
        git fetch $(Pipeline.Workspace)/git-gh-pages/gh-pages.bundle gh-pages
        git branch -f gh-pages FETCH_HEAD
        git push --force origin gh-pages:gh-pages
      displayName: Update GitHub pages website
      env:
        GITHUB_TOKEN: $(GITHUB_TOKEN)
