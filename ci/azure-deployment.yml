# Cranko deployment pipline, run when all CI tests pass on the `master` or `rc
# branches. NB: make sure to properly handle both cases!

parameters:
- name: rcBuild
  type: boolean
  default: false

steps:
- bash: |
    cd $(Pipeline.Workspace)
    mkdir artifact-collection
    cp binary-*/* artifact-collection/
  displayName: Collect release artifacts

- publish: $(Pipeline.Workspace)/artifact-collection
  displayName: Publish release artifacts
  artifact: artifact-collection

# if we're on the `rc` branch, the release has been fully vetted and the
# internal artifacts have been gathered -- time to lock in a new `release`
# commit and invoke the full release processes.

- ${{ if eq(parameters.rcBuild, true) }}:
  - checkout: self

  - bash: |
      git switch -c release
      git pull --ff-only $(Pipeline.Workspace)/git-release/release.bundle
      git status
      git show
      tar xzf $(Pipeline.Workspace)/binary-x86_64-unknown-linux-gnu/cranko-*.tar.gz
      ./cranko release-workflow tag
    displayName: Prepare release commit and tags

  - bash: |
      ./cranko github install-credential-helper
      git push --tags origin release:release
    displayName: Update release branch
    env:
      GITHUB_TOKEN: $(GITHUB_TOKEN)

  - bash: |
      # If `./cranko` isn't moved, Cargo will complain about the dirty
      # working directory.
      mv ./cranko /tmp/
      /tmp/cranko cargo foreach-released publish
      mv /tmp/cranko .
    displayName: Publish updated Cargo crates
    env:
      CARGO_REGISTRY_TOKEN: $(CARGO_REGISTRY_TOKEN)

  - bash: |
      ./cranko github create-releases
      ./cranko github upload-artifacts cranko $(Pipeline.Workspace)/artifact-collection/*
    displayName: Create GitHub releases
    env:
      GITHUB_TOKEN: $(GITHUB_TOKEN)

  - bash: |
      git fetch $(Pipeline.Workspace)/git-gh-pages/gh-pages.bundle gh-pages
      git branch -f gh-pages FETCH_HEAD
      git push --force origin gh-pages:gh-pages
    displayName: Update GitHub pages website
    env:
      GITHUB_TOKEN: $(GITHUB_TOKEN)
